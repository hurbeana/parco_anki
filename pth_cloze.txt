The operating system sees {{c1::threads}} as {{c2::the smallest unit that can be independently scheduled}};pthreads
{{c1::Oversubscription}} is {{c2::the practice of spawning more threads than the number of available cores}};pthreads
{{c1::A thread can be spawned}} by calling {{c2::<code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)</code>}};pthreads
{{c1::A thread can be terminated}} by calling {{c2::<code>void pthread_exit(void *retval)</code>}};pthreads
{{c1::A thread can wait for another one to complete}} by calling {{c2::<code>int pthread_join(pthread_t thread, void **retval)</code>}};pthreads
{{c1::The id of a thread can be retrieved}} by calling {{c2::<code>pthread_t pthread_self(void)</code>}};pthreads
{{c1::Threads can be compared}} by calling {{c2::<code>int pthread_equal(pthread_t t1, pthread_t t2)</code>}};pthreads
{{c1::Locks}} are called {{c2::mutex}} in pthreads terminology;pthreads
{{c1::Wait-freeness}} is the non-blocking analogy of {{c2::starvation-freeness}};pthreads
{{c1::Lock-freeness}} is the non-blocking analogy of {{c2::deadlock-freeness}};pthreads
{{c1::Starvation-freeness}} implies {{c2::deadlock-freeness}};pthreads
{{c1::Wait-freeness}} implies {{c2::lock-freeness}};pthreads
